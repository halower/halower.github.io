<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/10/24/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
        <tag>表格</tag>
        <tag>表单验证</tag>
      </tags>
  </entry>
  <entry>
    <title>并发编程三大核心</title>
    <url>/2020/10/24/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%89%E5%A4%A7%E6%A0%B8%E5%BF%83/</url>
    <content><![CDATA[<p>「横看成岭侧成峰，远近高低各不同」，远看看轮廓，近看看细节，不断切换思维或视角来学习</p>
<img src="/2020/10/24/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%89%E5%A4%A7%E6%A0%B8%E5%BF%83/202010240002-1603524670758.jpg" class="">

<p><strong>并发编程可以抽象成三个核心问题: 分工、同步/协作、互斥</strong></p>
<p>如果你已经工作了，那么你一定听说过或者正在应用敏捷开发模式来交付日常的工作任务，我们就用你熟悉的流程来解释这三个核心问题</p>
<h2 id="分工"><a href="#分工" class="headerlink" title="分工"></a>分工</h2><blockquote>
<p>将当前 Sprint 的 Story 拆分成「合适」大小的 Task，并且安排给「合适」的 Team Member 去完成</p>
</blockquote>
<p>这里面用了两个「合适」，将 Story 拆分成大小适中，可完成的 Task 是非常重要的。拆分的粒度太粗，导致这个任务完成难度变高，耗时长，不易与其他人配合；拆分的粒度太细，又导致任务太多，不好管理与追踪，浪费精力和资源。(<strong>合适的线程才能更好的完成整块工作，当然一个线程可以轻松搞定的就没必要多线程</strong>)；安排给合适的人员去完成同样重要，<code>UX-UE</code> 问题交给后端人员处理，很显然是有问题的 (<strong>主线程应该做的事交给子线程显然是解决不了问题的，每个线程做正确的事才能发挥作用</strong>)</p>
<p>关于分工，常见的 Executor，生产者-消费者模式，Fork/Join 等，这都是分工思想的体现</p>
<h2 id="同步-协作"><a href="#同步-协作" class="headerlink" title="同步/协作"></a>同步/协作</h2><p>任务拆分完毕，我要等张三的任务，张三要等李四的任务，也就是说任务之间存在依赖关系，前面的任务执行完毕，后面的任务才可以执行，人高级在可以通过沟通反复确认，确保自己的任务可以开始执行。<strong>但面对程序，我们需要了解程序的沟通方式，一个线程执行完任务，如何通知后续线程执行</strong></p>
<p>所有的同步/协作关系我们都可以用你最熟悉的 If-then-else 来表示:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(前序任务完成)&#123;</span><br><span class="line">    execute();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    wait();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码就是说:<strong>当某个条件不满足时，线程需要等待；当某个条件满足时，线程需要被唤醒执行</strong>，线程之间的协作可能是主线程与子线程的协作，可能是子线程与子线程的合作， <code>Java SDK </code>中<code> CountDownLatch</code> 和 <code>CyclicBarrier</code> 就是用来解决线程协作问题的</p>
<h2 id="互斥"><a href="#互斥" class="headerlink" title="互斥"></a>互斥</h2><p><strong>分工和同步强调的是性能，但是互斥是强调正确性</strong>，就是我们常常提到的「线程安全」，当多个线程<strong>同时</strong>访问一个共享变量/成员变量时，就可能发生不确定性，造成不确定性主要是有<code>可见性</code>、<code>原子性</code>、<code>有序性</code>这三大问题，而解决这些问题的核心就是互斥</p>
<blockquote>
<h3 id="互斥-1"><a href="#互斥-1" class="headerlink" title="互斥"></a>互斥</h3><p>同一时刻，只允许一个线程访问共享变量</p>
</blockquote>
<p>来看下图，主干路就是共享变量，进入主干路一次只能有一辆车，这样你是否理解了呢？「<strong>天下大事，分久必合</strong>」</p>
<img src="/2020/10/24/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%89%E5%A4%A7%E6%A0%B8%E5%BF%83/42f62cfa83224f5b8735bc03df7deb39.gif" class="" title="img">

<p>同样 <code>Java SDK </code>也有很多互斥的解决方案，比如你马上就能想到 <code>synchronized</code> 关键字，<code>Lock</code>，<code>ThreadLocal</code> 等就是互斥的解决方案</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>资本家疯狂榨取劳动工人的剩余价值，获得最大收益。当你面对 CPU，内存，IO 这些劳动工人时，你就是那个资本家，你要思考如何<code>充分榨取</code>它们的价值</p>
<blockquote>
<p>当一个工人能干的活，绝不让两个人来干(单线程能满足就没必要为了多线程)<br>当多个工人干活时，就要让他们分工明确，合作顺畅，没矛盾</p>
</blockquote>
<p>当任务很大时，由于 IO 干活慢，CPU 干活快，就没必要让 CPU 死等当前的 IO，转而去执行其他指令，这就是<code>榨取剩余价值</code>，如何最大限度的榨取其价值，这就涉及到后续的调优问题，比如多少线程合适等</p>
<p><strong>分工是设计，同步和互斥是实现</strong>，没有好的设计也就没有好的实现，所以在分工阶段，强烈建议大家勾划草图，了解瓶颈所在，这样才会有更好的实现，后续章节的内容，我也会带领大家画草图，分析问题，逐步养成这个习惯</p>
<p>本章内容可以用下面的图来简单概括，叶子结点的内容我们会逐步点亮，现阶段不用过分关注(如果你上来就啃 <code>JDK</code> 源码，也许你会痛苦的迷失，并最终放弃你的进阶之路的)</p>
<img src="/2020/10/24/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%89%E5%A4%A7%E6%A0%B8%E5%BF%83/202010240001.png" class="">

<p><strong>理解三大核心问题，你要充分结合生活中的实际，程序中的并发问题，基本上都能在实际生活中找得到原型</strong></p>
<p>下一篇文章的内容，我们就要聊聊，引起线程安全的三个问题:「可见性，原子性，有序性」，这涉及到 <code>JMM</code> 的一点内容，可以提前了解一下的，这样我们才能更好的碰撞</p>
<h2 id="灵魂追问"><a href="#灵魂追问" class="headerlink" title="灵魂追问"></a>灵魂追问</h2><ol>
<li>工作中多线程编程的场景多吗？</li>
<li>想到多线程，只会想到 synchronized 吗？</li>
<li>Java 并发包各个类，你有了解底层实现和设计理念吗？</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>并发编程三大问题</title>
    <url>/2020/10/24/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%89%E5%A4%A7%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><blockquote>
<ul>
<li>生活中你一定听说过——能者多劳</li>
<li>作为 Java 程序员，你一定听过——这个功能请求慢，能加一层缓存或优化一下 SQL 吗？</li>
<li>看过中国古代神话故事的也一定听过——天上一天，地上一年</li>
</ul>
</blockquote>
<img src="/2020/10/24/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%89%E5%A4%A7%E9%97%AE%E9%A2%98/202010242008.png" class="">

<p>一切设计来源于生活，上一章 中有讲过，作为”资本家”，你要尽可能的榨取 CPU，内存与 IO 的剩余价值，但三者完成任务的速度相差很大，CPU &gt; 内存 &gt; IO，CPU 是天，那内存就是地，内存是天，那 IO 就是地，那怎样平衡三者，提升整体速度呢？</p>
<ol>
<li>CPU 增加缓存，还不止一层缓存，平衡内存的慢</li>
<li>CPU 能者多劳，通过分时复用，平衡 IO 的速度差异</li>
<li>优化编译指令</li>
</ol>
<p>上面的方式貌似解决了木桶短板问题，但同时这种解决方案也伴随着产生新的<strong>可见性，原子性，和有序性</strong>的问题，且看</p>
<h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><p><strong>一个线程对共享变量的修改，另外一个线程能够立刻看到，我们称为可见性</strong></p>
<p>谈到可见性，要先引出 JMM (Java Memory Model) 概念, 即 Java 内存模型，Java 内存模型规定，将所有的变量都存放在 <strong>主内存</strong> 中，当线程使用变量时，会把主内存里面的变量 <strong>复制</strong> 到自己的工作空间或者叫作 <strong>私有内存</strong> ，线程读写变量时操作的是自己工作内存中的变量。</p>
<p>用 Git 的工作流程理解上面的描述就很简单了，<strong>Git 远程仓库就是主内存，Git 本地仓库就是自己的工作内存</strong></p>
<p>文字描述有些抽象，我们来图解说明:</p>
<img src="/2020/10/24/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%89%E5%A4%A7%E9%97%AE%E9%A2%98/202010242001.png" class="">

<p>看这个场景:</p>
<blockquote>
<ol>
<li>主内存中有变量 x，初始值为 0</li>
<li>线程 A 要将 x 加 1，先将 x=0 拷贝到自己的私有内存中，然后更新 x 的值</li>
<li><strong>线程 A 将更新后的 x 值回刷到主内存的时间是不固定的</strong></li>
<li>刚好在线程 A 没有回刷 x 到主内存时，线程 B 同样从主内存中读取 x，此时为 0，和线程 A 一样的操作，最后期盼的 x=2 就会编程 x=1</li>
</ol>
</blockquote>
<p>这就是线程可见性的问题</p>
<p><code>JMM</code> 是一个抽象的概念，在实际实现中，线程的工作内存是这样的:</p>
<img src="/2020/10/24/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%89%E5%A4%A7%E9%97%AE%E9%A2%98/202010242002.jpg" class="">

<p>为了平衡内存/IO 短板，会在 CPU 上增加缓存，每个核都只有自己的一级缓存，甚至有一个所有 CPU 都共享的二级缓存，就是上图的样子了，都说这么设计是硬件同学留给软件同学的一个坑，但能否跳过去这个坑也是衡量软件同学是否走向 Java 进阶的关键指标吧……</p>
<blockquote>
<h4 id="小提示"><a href="#小提示" class="headerlink" title="小提示"></a>小提示</h4><p>从上图中你也可以看出，在 Java 中，所有的实例域，静态域和数组元素都存储在堆内存中，堆内存在线程之间共享，这些在后续文章中都称之为「共享变量」，局部变量，方法定义参数和异常处理器参数不会在线程之间共享，所以他们不会有内存可见性的问题，也就不受内存模型的影响</p>
</blockquote>
<p><strong>一句话，要想解决多线程可见性问题，所有线程都必须要刷取主内存中的变量</strong><br>怎么解决可见性问题呢？Java 关键字 <strong>volatile</strong> 帮你搞定，后续章节会分析……</p>
<h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><p>原子（atom）指化学反应不可再分的基本微粒，原子性操作你应该能感受到其含义:</p>
<blockquote>
<p>所谓原子操作是指不会被线程调度机制打断的操作；这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch</p>
</blockquote>
<p>小品「钟点工」有一句非常经典的台词，要把大象装冰箱，总共分几步？</p>
<p>来看一小段程序:</p>
<img src="/2020/10/24/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%89%E5%A4%A7%E9%97%AE%E9%A2%98/202010242006.png" class="">

<p>多线程情况下能得到我们期盼的 <code>count = 20000</code> 的值吗？ 也许有同学会认为，线程调用的 counter 方法只有一个 count++ 操作，是单一操作，所以是原子性的，非也。在线程第一讲中说过我们不能用高级语言思维来理解 CPU 的处理方式，count++ 转换成 CPU 指令则需要三步，通过下面命令解析出汇编指令等信息:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">javap -c UnsafeCounter</span><br></pre></td></tr></table></figure>

<p>截取 counter 方法的汇编指令来看:</p>
<img src="/2020/10/24/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%89%E5%A4%A7%E9%97%AE%E9%A2%98/202010242005.png" class="">

<p>解释一下上面的指令，<br>16 : 获取当前 count 值，并且放入栈顶<br>19 : 将常量 1 放入栈顶<br>20 : 将当前栈顶中两个值相加，并把结果放入栈顶<br>21 : 把栈顶的结果再赋值给 count</p>
<p>由此可见，简单的 count++ 不是一步操作，被转换为汇编后就不具备原子性了，就好比大象装冰箱，其实要分三步:</p>
<blockquote>
<p>第一步，把冰箱门打开；第二步，把大象放进去；第三步，把冰箱门带上</p>
</blockquote>
<p>结合 <code>JMM</code> 结构图理解，说明一下为什么很难得到 <code>count=20000</code> 的结果:<img src="/2020/10/24/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%89%E5%A4%A7%E9%97%AE%E9%A2%98/202010242003.png" class=""></p>
<p>多线程计数器，如何保证多个操作的原子性呢？最粗暴的方式是在方法上加 <strong>synchronized</strong> 关键字，比如这样:</p>
<img src="/2020/10/24/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%89%E5%A4%A7%E9%97%AE%E9%A2%98/202010242006.png" class="">

<p>问题是解决了，如果 synchronized 是万能良方，那么也许并发就没那么多事了，可以靠一个 synchronized 走天下了，事实并不是这样，synchronized 是独占锁 (同一时间只能有一个线程可以调用)，没有获取锁的线程会被阻塞；另外也会带来很多线程切换的上下文开销</p>
<p>所以 <code>JDK</code> 中就有了非阻塞 CAS (Compare and <strong>Swap</strong>) 算法实现的原子操作类 AtomicLong 等工具类，看过源码的同学也许会发现一个共同特点，所有原子类中都有下面这样一段代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br></pre></td></tr></table></figure>

<p>这个类是 JDK 的 rt.jar 包中的 Unsafe 类提供了 <strong>硬件级别</strong> 的原子性操作，类中的方法都是 native 修饰的，后面介绍原子类之前也会先说明这个类中的几个方法，这里先简单介绍有个印象即可。</p>
<p>有同学不理解我刚刚提到的线程上下文切换开销很大是什么意思，举 2个例子你就懂了:</p>
<blockquote>
<ul>
<li>你(CPU)在看两本书(两个线程)，看第一本书很短时间后要去看第二本书，看第二本书很短时间后又回看第一本书，并要精确的记得看到第几行，当初看到了什么(CPU 记住线程级别的信息)，当让你 <strong>“同时”</strong> 看 10 本甚至更多，切换的开销就很大了吧</li>
<li>综艺节目中有很多游戏，让你一边数钱，又要一边做其他的事，最终保证多样事情都做正确，大脑开销大不大，你试试就知道了😊</li>
</ul>
</blockquote>
<h3 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h3><p>生活中你问候他人「吃了吗你？」和「你吃了吗？」是一个意思，你写的是下面程序:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span>；</span><br><span class="line">b =  <span class="number">2</span>;</span><br><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(b);</span><br></pre></td></tr></table></figure>

<p>编译器优化后可能就变成了这样:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">b =  <span class="number">2</span>;</span><br><span class="line">a = <span class="number">1</span>；</span><br><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(b);</span><br></pre></td></tr></table></figure>

<p>这个情况，编译器调整了语句顺序没什么影响，但编译器 <strong>擅自</strong> 优化顺序，就给我们埋下了雷，比如应用双重检查方式实现的单例</p>
<img src="/2020/10/24/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%89%E5%A4%A7%E9%97%AE%E9%A2%98/202010242004.png" class="">

<p>一切又很完美是不是，非也，问题出现在 <code>instance = new Singleton();</code>，这 1 行代码转换成了 CPU 指令后又变成了 3 个，我们理解 new 对象应该是这样的:</p>
<ol>
<li>分配一块内存 M</li>
<li>在内存 M 上初始化 Singleton 对象</li>
<li>然后 M 的地址赋值给 instance 变量</li>
</ol>
<p>但编译器<strong>擅自</strong>优化后可能就变成了这样:</p>
<ol>
<li>分配一块内存 M</li>
<li>然后将 M 的地址赋值给 instance 变量</li>
<li>在内存 M 上初始化 Singleton 对象</li>
</ol>
<p>首先 new 对象分了三步，给 CPU 留下了切换线程的机会；另外，编译器优化后的顺序可能导致问题的发生，来看:</p>
<blockquote>
<ol>
<li>线程 A 先执行 getInstance 方法，当执行到指令 2 时，恰好发生了线程切换</li>
<li>线程 B 刚进入到 getInstance 方法，判断 if 语句 instance 是否为空</li>
<li>线程 A 已经将 M 的地址赋值给了 instance 变量，所以线程 B 认为 instance 不为空</li>
<li>线程 B 直接 return instance 变量</li>
<li>CPU 切换回线程 A，线程 A 完成后续初始化内容</li>
</ol>
</blockquote>
<p>我们还是画个图说明一下:</p>
<img src="/2020/10/24/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%89%E5%A4%A7%E9%97%AE%E9%A2%98/202010242007-1603538900268.png" class="">

<p>如果线程 A 执行到第 2 步，线程切换，由于线程 A 没有把红色箭头执行完全，线程 B 就会得到一个未初始化完全的对象，访问 instance 成员变量的时候就可能发生 NPE，如果将变量 instance 用 volatile 或者 final 修饰(涉及到类的加载机制，问题就解决了.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>你所看到的程序并不一定是编译器优化/编译后的 CPU 指令，大象装冰箱是是个程序，但其隐含三个步骤，学习并发编程，你要按照 CPU 的思维考虑问题，所以你需要深刻理解 <strong>可见性/原子性/有序性</strong> ，这是产生并发 Bug 的源头</p>
<p>本节说明了三个问题，下面的文章也会逐个分析解决以上问题的办法，以及相对优的方案</p>
<h2 id="灵魂追问"><a href="#灵魂追问" class="headerlink" title="灵魂追问"></a>灵魂追问</h2><ol>
<li>为什么用 final 修饰的变量就是线程安全的了呢？</li>
<li>你会经常查看 CPU 汇编指令吗？</li>
<li>如果让你写单例，你通常会采用哪种实现？</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
      </tags>
  </entry>
</search>
